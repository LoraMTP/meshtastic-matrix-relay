name: Build PYZ for ARMv7

permissions:
  contents: write

on:
  release:
    types: [published]
  workflow_dispatch:

jobs:
  build-armv7-pyz:
    runs-on: ubuntu-latest
    name: Build PYZ (armv7)

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU for multi-arch builds
        uses: docker/setup-qemu-action@v3

      - name: Extract version from setup.cfg
        id: get_version
        run: |
          VERSION=$(grep '^version =' setup.cfg | cut -d= -f2 | tr -d '[:space:]')
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
      - name: Build inside ARMv7 Docker (using shiv)
        uses: addnab/docker-run-action@v3
        with:
          image: arm32v7/python:3.11
          options: --platform linux/arm/v7 -v ${{ github.workspace }}:/github/workspace -w /github/workspace
          run: |
            set -e
            echo "--- Installing build dependencies (apt) ---"
            # Added libbluetooth-dev for bleak if needed, libatlas-base-dev for numpy/scipy potentially
            apt-get update && apt-get install -y --no-install-recommends gcc libffi-dev libssl-dev git libbluetooth-dev libatlas-base-dev
            echo "--- Installing shiv ---"
            pip install --no-cache-dir shiv
            echo "--- Building PYZ ---"
            PYZ_FILENAME="mmrelay_armv7_${{ steps.get_version.outputs.VERSION }}.pyz"
            # --- Use the console script name 'mmrelay' defined in setup.cfg ---
            # Ensure the current directory (.) is built correctly by setuptools first
            # Install the project itself along with dependencies INSIDE the container before shivving
            echo "--- Installing project dependencies and project itself ---"
            # Install jsonschema<4.0.0 to avoid rpds dependency which has binary components
            pip install "jsonschema<4.0.0"
            pip install .
            echo "--- Building PYZ with shiv ---"
            # Explicitly specify the entry point module
            shiv . -o "${PYZ_FILENAME}" -e mmrelay.main:run --compressed
            echo "--- Listing created PYZ file ---"
            ls -l "${PYZ_FILENAME}"
      - name: Upload PYZ to Release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ github.workspace }}/mmrelay_armv7_${{ steps.get_version.outputs.VERSION }}.pyz
          asset_name: mmrelay_armv7_${{ steps.get_version.outputs.VERSION }}.pyz
          tag: ${{ github.ref_name }}
          overwrite: true
